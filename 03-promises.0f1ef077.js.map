{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAeH,EAAOE,cAAc,uBACpCE,EAAcJ,EAAOE,cAAc,sBACnCG,EAAWL,EAAOE,cAAc,wBAEnBD,SAASC,cAAc,aACtBF,EAAOE,cAAc,uBACpBF,EAAOE,cAAc,wBA2B1C,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAM,CACVR,WACAC,SAGFQ,YAAW,WACLJ,EACFF,EAAQK,GAERJ,EAAOI,E,GAERP,E,IAvCPR,EAAOiB,iBAAiB,UAExB,SAAwBC,GACtBA,EAAIC,iBAKJ,IAJA,IAAMC,EAAaC,SAASlB,EAAamB,OACnCC,EAAYF,SAASjB,EAAYkB,OACjCE,EAASH,SAAShB,EAASiB,OAExBG,EAAI,EAAGA,EAAID,EAAQC,IAAK,CACfnB,EAAcmB,EAAGL,EAAaK,EAAIF,GAG/CG,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MACjBoB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M,IAGjDwB,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAUC,EAAKmB,EAALnB,MAClBoB,EAAA9B,GAAS+B,OAAOI,QACd,sBAAqCF,OAAfxB,EAAS,QAAYwB,OAANvB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst firstDelayEl = formEl.querySelector('input[name=\"delay\"]');\nconst delayStepEl = formEl.querySelector('input[name=\"step\"]');\nconst amountEl = formEl.querySelector('input[name=\"amount\"]');\n\nconst formElData = document.querySelector('.formData');\nconst startElData = formEl.querySelector('input[name=\"start\"]');\nconst finishElData = formEl.querySelector('input[name=\"finish\"]');\n\nformEl.addEventListener('submit', createPromises);\n\nfunction createPromises(evt) {\n  evt.preventDefault();\n  const firstDelay = parseInt(firstDelayEl.value);\n  const delayStep = parseInt(delayStepEl.value);\n  const amount = parseInt(amountEl.value);\n\n  for (let i = 0; i < amount; i++) {\n    const promise = createPromise(i, firstDelay + i * delayStep);\n\n    promise\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    const obj = {\n      position,\n      delay,\n    };\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(obj);\n      } else {\n        reject(obj);\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$firstDelayEl","$ce04d3a99e08e73b$var$delayStepEl","$ce04d3a99e08e73b$var$amountEl","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","obj","setTimeout","addEventListener","evt","preventDefault","firstDelay","parseInt","value","delayStep","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.0f1ef077.js.map"}